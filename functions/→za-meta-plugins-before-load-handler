#autoload
# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-
# vim: ft=zsh sw=2 ts=2 et
#
# Copyright (c) 2021-present Z-Shell Community

→za-meta-plugins-before-load-handler() {
  # Set the base and typically useful options.
  builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
  builtin setopt extended_glob warn_create_global typeset_silent no_short_loops rc_quotes no_auto_pushd
  local type=$1 id=$2 id_as=$3 args=$4 ices=$5 hook=$6 subtype=$7
  if (( $+ICE[debug] )) {
    # Enable the output from this annex
    integer ibshow_messages=1 ibdebug=1
  }
  # Apply the default ices first.
  local -a ices
  ices=( "${(@Q)${(@z)zi_annex_meta_plugins[default-ices]}}" )
  (( ${#ices} > 0 && ${#ices} % 2 == 0 )) && ICE=( "${(@kv)ICE}" "${ices[@]}" )
  # Exclude IDs with slashes and also packages
  [[ $id == */* ]] && local bad_id=1
  [[ $id == *:* ]] && local bad_id2=1
  [[ $ICE[teleid] == */* ]] && local bad_tele=1
  (( $+ICE[pack] )) && local is_pack=1
  if (( bad_id || bad_id2 || bad_tele || is_pack )) {
    if (( ibdebug )) {
      local -a msgs
        msgs=( ${bad_id:+the ID contains a slash} ${bad_id2:+the ID looks like a snippet ID} 
               ${bad_tele:+"the {ice}teleid{meta}''{msg} ice contains a slash"} 
               ${is_pack:+"the ID is a package ↔ {ice}pack{meta}''{msg} ice given"} )
        +zi-message "{annex}meta-plugins-annex{ehi}:{rst} Skipping the {id-as}ID{ehi}: {meta}$id{rst} ({p}reason(s){ehi}:{rst} ${(j:, :)msgs}{rst})"
    }
    return 0
  }
  integer ibshow_messages iberror_flag
  local -a match mbegin mend reply
  local MATCH REPLY
  integer MBEGIN MEND
  local -A tpe_map
  tpe_map=( 0 plugin 1 snippet )
  # Reset the communication fields.
  ZI[annex-before-load:new-@]=""
  ZI[annex-before-load:new-global-ices]=""
  # Strip the ID from some possible accidental /-s.
  id=${${id#@}%%(///|//|/)}
  local meta_plugin_data=${(v)zi_annex_meta_plugins_map[$id]}
  if [[ -n $meta_plugin_data ]] {
    # Count the recognized meta-plugins
    zi_annex_meta_plugins_map[recon-count]=$(( zi_annex_meta_plugins_map[recon-count] + 1 ))
    local -a plugin_array loaded_plugins not_existing on_demand_cand on_demand_skip
    plugin_array=( ${(s: :)meta_plugin_data} )
    loaded_plugins=( ${(@Q)${(@z)zi_annex_meta_plugins[annex-loaded-plugins]}} )
    local p
    # Detect if any plugins should be skipped on-demand, via skip''.
    on_demand_cand=( ${(@)${(@ps:\t:)${(@s: :)${(@s.;.)ICE[skip]}}}} )
    for p ( $on_demand_cand ) {
      integer idx1 count=1
      local pattern="(*/$p*|$p*|*$p|*-$p*|*$p-*)"
      while (( (idx1 = $plugin_array[(in:count:)$pattern]) != ${#plugin_array} + 1  )) {
        count+=1
        on_demand_skip+=( $plugin_array[idx1] )
      }
    }
    # Check if any plugins are missing on the disk.
    for p ( ${plugin_array:|on_demand_skip} ) {
      if [[ -z $zi_annex_meta_plugins_map[$p] ]] && ! .zi-get-object-path AUTO $p
      then
        ibshow_messages=1
        not_existing+=( $p )
      fi
    }
    # Debug message.
    if (( ibshow_messages )) {
      (($+functions[.zi-two-paths])) || builtin source ${ZI[BIN_DIR]}/lib/zsh/side.zsh
      # Output a separating newline if the previous-processed plugin isn't a meta-plugin → to cluster the messages.
      [[ -z $zi_annex_meta_plugins_map[${ZI[annex-exposed-processed-IDs]##* }] ]] && builtin print
      +zi-message -n "{hi}$zi_annex_meta_plugins_map[recon-count]{rst} "
      +zi-message "{annex}meta-plugins-annex{ehi}:{rst} Loading{ehi}:{rst} \`{b}{meta}$id{rst}' consisting of{ehi}:{rst}"
      integer count=0
      local -a skipped
      for p ( $plugin_array ) {
        count+=1
        .zi-any-colorify-as-uspl2 $p
        [[ $p = $plugin_array[-1] ]] && local enotlast= || local enotlast=0
        REPLY=${REPLY//\//∕}
        integer idx1=0 idx2=0 idx3=0
        if (( ((idx1 = $loaded_plugins[(I)$p]) || (idx2 = $zsh_loaded_plugins[(I)$p])) && \
        ! $not_existing[(I)$p] || (idx3 = $on_demand_skip[(I)$p]) )) && \
        [[ $p != z-shell/null ]] && [[ $p != z-shell/0 ]] {
          idx3=$on_demand_skip[(I)$p]
          local idtxt="{dbg}${p//\//∕} "
          if (( (idx1 || idx2) && ! idx3 )) {
            skipped+=( $REPLY )
            idtxt+="{warn}already loaded{rst}"
          } else {
            idtxt+="{warn}skip{rst}"
          }
          REPLY=$idtxt
        }
        +zi-message -n " {meta}$count{rst}{msg}) $REPLY{msg}${enotlast:+,}"
        }
        +zi-message ".{rst}"
        if (( ibdebug && ${#skipped} )) {
          +zi-message -n "{hi}$zi_annex_meta_plugins_map[recon-count]{rst} "
          +zi-message "{annex}meta-plugins-annex{ehi}:{rst} Skipping already loaded{ehi}:{rst} ${(j:, :)skipped}{rst}"
        }
      }
      # Pre-process each plugin retrieving the assigned, default ice-lists and preparing the above communication fields.
      for p ( $plugin_array ) {
        local ice_list_data=$zi_annex_meta_plugins_config_map[$p]
        if (( ( $not_existing[(I)$p] || ! ($loaded_plugins[(I)$p] || $zsh_loaded_plugins[(I)$p]) ) && \
        ! $on_demand_skip[(I)$p] )) || [[ $p == z-shell/null ]] || [[ $p == z-shell/0 ]] {
          # The ↑z-shell/null↑ is a bogus exception, as this plugin will never be loaded under the direct name.
          ZI[annex-before-load:new-@]+="$ice_list_data @${(q)p} "
          zi_annex_meta_plugins[annex-loaded-plugins]+=" ${(q)p}"
        }
      }
      ZI[annex-before-load:new-@]+=" $args"
      ZI[annex-before-load:new-@]=${ZI[annex-before-load:new-@]## ##}
      # Setting to 1 here will prevent the error message on no plugin/snippet ID given.
      integer retval_part=${${ZI[annex-before-load:new-@]:+2}:-1}
    } else {
      integer retval_part=0
    }
    return $(( ${${ZI[annex-before-load:new-global-ices]:+4}:-0} + retval_part + iberror_flag ))
}
